-- Cria Schema
CREATE database db_deliverycenter;

USE db_deliverycenter;

CREATE TABLE `db_deliverycenter`.`channels` (
  `channel_id` int DEFAULT NULL,
  `channel_name` text,
  `channel_type` text);

CREATE TABLE `db_deliverycenter`.`hubs` (
  `hub_id` int DEFAULT NULL,
  `hub_name` text,
  `hub_city` text,
  `hub_state` text,
  `hub_latitude` double DEFAULT NULL,
  `hub_longitude` double DEFAULT NULL);

CREATE TABLE `db_deliverycenter`.`stores` (
  `store_id` int DEFAULT NULL,
  `hub_id` int DEFAULT NULL,
  `store_name` text,
  `store_segment` text,
  `store_plan_price` int DEFAULT NULL,
  `store_latitude` text,
  `store_longitude` text);


CREATE TABLE `db_deliverycenter`.`drivers` (
  `driver_id` int DEFAULT NULL,
  `driver_modal` text,
  `driver_type` text);


CREATE TABLE `db_deliverycenter`.`deliveries` (
  `delivery_id` int DEFAULT NULL,
  `delivery_order_id` int DEFAULT NULL,
  `driver_id` int DEFAULT NULL,
  `delivery_distance_meters` int DEFAULT NULL,
  `delivery_status` text);


CREATE TABLE `db_deliverycenter`.`payments` (
  `payment_id` int DEFAULT NULL,
  `payment_order_id` int DEFAULT NULL,
  `payment_amount` double DEFAULT NULL,
  `payment_fee` double DEFAULT NULL,
  `payment_method` text,
  `payment_status` text);


CREATE TABLE `db_deliverycenter`.`orders` (
  `order_id` int DEFAULT NULL,
  `store_id` int DEFAULT NULL,
  `channel_id` int DEFAULT NULL,
  `payment_order_id` int DEFAULT NULL,
  `delivery_order_id` int DEFAULT NULL,
  `order_status` text,
  `order_amount` double DEFAULT NULL,
  `order_delivery_fee` int DEFAULT NULL,
  `order_delivery_cost` text,
  `order_created_hour` int DEFAULT NULL,
  `order_created_minute` int DEFAULT NULL,
  `order_created_day` int DEFAULT NULL,
  `order_created_month` int DEFAULT NULL,
  `order_created_year` int DEFAULT NULL,
  `order_moment_created` text,
  `order_moment_accepted` text,
  `order_moment_ready` text,
  `order_moment_collected` text,
  `order_moment_in_expedition` text,
  `order_moment_delivering` text,
  `order_moment_delivered` text,
  `order_moment_finished` text,
  `order_metric_collected_time` text,
  `order_metric_paused_time` text,
  `order_metric_production_time` text,
  `order_metric_walking_time` text,
  `order_metric_expediton_speed_time` text,
  `order_metric_transit_time` text,
  `order_metric_cycle_time` text);
  
-- 1- Qual o número de hubs por cidade?

SELECT count(hub_city), hub_city 
FROM hubs 
group by hub_city;

-- 2- Qual o número de pedidos (orders) por status?

SELECT count(order_id)
FROM orders  
group by order_status;

-- 3- Qual o número de lojas (stores) por cidade dos hubs?

	SELECT count(A.store_id), B.hub_city
    FROM stores A
	inner join hubs B
	ON A.hub_id = B.hub_id
	group by B.hub_city;
    
-- 4- Qual o maior e o menor valor de pagamento (payment_amount) registrado?

	SELECT max(payment_amount), min(payment_amount)
    FROM payments;
    
-- 5- Qual tipo de driver (driver_type) fez o maior número de entregas?

	SELECT COUNT(driver_type), driver_type
    FROM drivers
	GROUP BY driver_type
    order by max(driver_type);
    
-- 6- Qual a distância média das entregas por tipo de driver (driver_modal)?

SELECT avg(delivery_distance_meters)
FROM drivers as dr
inner join deliveries as de 
ON dr.driver_id = de.driver_id
group by driver_modal
LIMIT 10;
	
-- 7- Qual a média de valor de pedido (order_amount) por loja, em ordem decrescente?

SELECT A.store_id,A.store_name,
AVG(B.order_amount)
AS average_order_amount
FROM stores A
JOIN orders B 
ON A.store_id = B.store_id
GROUP BY A.store_id,A.store_name
ORDER BY average_order_amount DESC;

-- 8- Existem pedidos que não estão associados a lojas? Se caso positivo, quantos?

SELECT count(*)
AS orders_sem_loja
FROM orders
WHERE store_id
IS NULL;

-- 9- Qual o valor total de pedido (order_amount) no channel 'FOOD PLACE'?

SELECT sum(A.order_amount)
AS total_pedido
FROM orders
AS A
inner join channels
AS B 
ON A.channel_id = B.channel_id
WHERE B.channel_name = 'FOOD PLACE';

-- 10- Quantos pagamentos foram cancelados (chargeback)?

SELECT count(*)
AS pagamentos_cancelados
FROM payments
WHERE payment_status = 'chargeback';

-- 11- Qual foi o valor médio dos pagamentos cancelados (chargeback)?

SELECT avg(payment_amount)
AS media_pagamentos_cancelados
FROM payments
WHERE payment_status = 'chargeback';

-- 12- Qual a média do valor de pagamento por método de pagamento (payment_method) em ordem decrescente?

SELECT payment_method, avg(payment_amount)
AS media_pagamento_metodo
FROM payments
group by payment_method
order by media_pagamento_metodo desc;

-- 13- Quais métodos de pagamento tiveram valor médio superior a 100?

SELECT payment_method
FROM payments
group by payment_method
having avg(payment_amount) > 100;

-- 14- Qual a média de valor de pedido (order_amount) por estado do hub (hub_state), segmento da loja (store_segment) e tipo de canal (channel_type)?

SELECT hubs.hub_state, stores.store_segment, channels.channel_type
FROM hubs
LEFT JOIN stores ON hubs.hub_id = stores.hub_id
LEFT JOIN orders ON stores.store_id = orders.store_id
LEFT JOIN channels ON orders.channel_id = channels.channel_id
GROUP BY hubs.hub_state, stores.store_segment, channels.channel_type
HAVING AVG(orders.order_amount) > 450;

-- 15- Qual estado do hub (hub_state), segmento da loja (store_segment) e tipode canal (channel_type) teve média de valor de pedido (order_amount) maior que450?

SELECT hubs.hub_state, stores.store_segment, channels.channel_type,
AVG(orders.order_amount)
AS average_order_amount
FROM orders
RIGHT JOIN stores ON orders.store_id = stores.store_id
RIGHT JOIN channels ON orders.channel_id = channels.channel_id
RIGHT JOIN hubs ON stores.hub_id = hubs.hub_id
GROUP BY hubs.hub_state, stores.store_segment, channels.channel_type;
